[
    {
        "categoryName": "Basics",
        "snippets": [
            {
                "title": "Hello, World!",
                "description": "Prints Hello, World! to the terminal.",
                "author": "James-Beans",
                "tags": [
                    "cpp",
                    "printing",
                    "hello-world",
                    "utility"
                ],
                "contributors": [],
                "code": "#include <iostream> // Includes the input/output stream library\n\nint main() { // Defines the main function\n    std::cout << \"Hello, World!\" << std::endl; // Outputs Hello, World! and a newline\n    return 0; // indicate the program executed successfully\n}\n"
            }
        ]
    },
    {
        "categoryName": "Data Structure Conversion",
        "snippets": [
            {
                "title": "Vector to Queue",
                "description": "Convert vector into queue quickly",
                "author": "mrityunjay2003",
                "tags": [
                    "cpp",
                    "data structures",
                    "queue",
                    "vector"
                ],
                "contributors": [],
                "code": "#include<queue>\n#include<vector>\n#include<deque>\n\nstd::queue<int> vectorToQueue(const std::vector<int>& v) {\n    return std::queue<int>(std::deque<int>(v.begin(), v.end()));\n}\n"
            }
        ]
    },
    {
        "categoryName": "Math And Numbers",
        "snippets": [
            {
                "title": "Check Prime Number",
                "description": "Check if an integer is a prime number",
                "author": "MihneaMoso",
                "tags": [
                    "cpp",
                    "number",
                    "prime"
                ],
                "contributors": [],
                "code": "bool is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Usage\n#include <iostream>\n\nint main() {\n    std::cout << is_prime(29) << std::endl; // Output: 1\n    return 0;\n}\n"
            },
            {
                "title": "Even-Odd Check",
                "description": "This code demonstrates the fastest way to check if a number is even or odd using bitwise operations. It's more efficient than using the modulor operator (%) since bitwise operations are performed at the CPU level.",
                "author": "Beast177 ",
                "tags": [
                    "cpp",
                    "number",
                    "even",
                    "odd",
                    "bitwise"
                ],
                "contributors": [],
                "code": "\nbool isEven(int num) {\n    return !(num & 1);\n}\n\n// usage -- [odd-even]\n\n#include <iostream>\n\nint main(){\n\n    int num1 = 2;\n    int num2 = 3;\n\n    std::cout << num1 << \" is \" << (isEven(num1) ? \"Even\" : \"Odd\") << \"\\n\"; // output - [Even] \n    std::cout << num2 << \" is \" << (isEven(num2) ? \"Even\" : \"Odd\") << \"\\n\"; // output - [Odd]\n}\n\n"
            }
        ]
    },
    {
        "categoryName": "String Manipulation",
        "snippets": [
            {
                "title": "Count Occurrences",
                "description": "Counts occurrences of a substring, uses modern C++ 20",
                "author": "beast177",
                "tags": [
                    "cpp",
                    "string"
                ],
                "contributors": [],
                "code": "#include <iostream>\n#include <string>\n#include <string_view>\n\nstatic size_t countOccurrences(std::string_view text, std::string_view substr) {\n        size_t count = 0;\n        size_t pos = 0;\n        while ((pos = text.find(substr, pos)) != std::string_view::npos) {\n            ++count;\n            pos += substr.length();\n        }\n        return count;\n}\n\n// use case --\n\nint main(){\n    // Count and replace\n    std::string text = \"Hello, world\";\n\n    auto count = countOccurrences(text, \"l\");\n    std::cout << std::format(\"Count of 'l': {}\\n\", count); // output -> Count of 'l' : 3\n}\n"
            },
            {
                "title": "Reverse String",
                "description": "Reverses the characters in a string.",
                "author": "Vaibhav-kesarwani",
                "tags": [
                    "cpp",
                    "array",
                    "reverse",
                    "utility"
                ],
                "contributors": [],
                "code": "#include <string>\n#include <algorithm>\n\nstd::string reverseString(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n"
            },
            {
                "title": "Split String",
                "description": "Splits a string by a delimiter",
                "author": "saminjay",
                "tags": [
                    "cpp",
                    "string",
                    "split",
                    "utility"
                ],
                "contributors": [],
                "code": "#include <string>\n#include <vector>\n\nstd::vector<std::string> split_string(std::string str, std::string delim) {\n    std::vector<std::string> splits;\n    int i = 0, j;\n    int inc = delim.length();\n    while (j != std::string::npos) {\n        j = str.find(delim, i);\n        splits.push_back(str.substr(i, j - i));\n        i = j + inc;\n    }\n    return splits;\n}\n"
            }
        ]
    }
]